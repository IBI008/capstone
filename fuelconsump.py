{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "03dbcb07-bb99-4145-a48d-5a1b7f8458e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import joblib\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# Load the saved Random Forest model\n",
    "model = joblib.load('tuned_random_forest_model.pkl')\n",
    "\n",
    "# App Title\n",
    "st.title(\"Vehicle Fuel Consumption Prediction\")\n",
    "st.markdown(\"This app predicts the **Fuel Consumption (L/100 km)** for light-duty vehicles.\")\n",
    "\n",
    "# Sidebar for user input\n",
    "st.sidebar.header(\"Input Features\")\n",
    "def user_input_features():\n",
    "    # Input fields for features\n",
    "    vehicle_class = st.sidebar.selectbox(\n",
    "        'Vehicle Class', \n",
    "        ['Sport utility vehicle', 'Mid-size', 'Full-size', 'Subcompact', 'Pickup truck', 'Station wagon', 'Minivan', 'Compact', 'Two-seater', 'Minicompact']\n",
    "    )\n",
    "    engine_size = st.sidebar.number_input('Engine Size (L)', min_value=0.0, max_value=10.0, value=2.0, step=0.1)\n",
    "    cylinders = st.sidebar.slider('Cylinders', min_value=2, max_value=16, value=4, step=1)\n",
    "    transmission = st.sidebar.selectbox('Transmission', ['A', 'M', 'AM', 'AS', 'AV'])\n",
    "    fuel_type = st.sidebar.selectbox('Fuel Type', ['X', 'Z', 'D', 'E', 'N'])\n",
    "    co2_emissions = st.sidebar.number_input('CO2 Emissions (g/km)', min_value=0, max_value=1000, value=200)\n",
    "    smog_rating = st.sidebar.slider('Smog Rating', min_value=1, max_value=10, value=5)\n",
    "    co2_rating = co2_rating = st.sidebar.slider(\"CO2 rating\", min_value=1, max_value10, value=5)\n",
    "\n",
    "    # Convert inputs into a DataFrame\n",
    "    data = {\n",
    "        'Vehicle class': [vehicle_class],\n",
    "        'Engine size (L)': [engine_size],\n",
    "        'Cylinders': [cylinders],\n",
    "        'Transmission': [transmission],\n",
    "        'Fuel type': [fuel_type],\n",
    "        'CO2 emissions (g/km)': [co2_emissions],\n",
    "        'CO2 rating': [co2_rating],\n",
    "        'Smog rating': [smog_rating]\n",
    "    }\n",
    "    return pd.DataFrame(data)\n",
    "\n",
    "# Get user input\n",
    "input_df = user_input_features()\n",
    "\n",
    "# Encode categorical variables (ensure this matches the model training process)\n",
    "def encode_features(df):\n",
    "    df['Vehicle class'] = df['Vehicle class'].replace({\n",
    "        'Sport utility vehicle': 6, 'Mid-size': 2, 'Full-size': 1, 'Subcompact': 8, \n",
    "        'Pickup truck': 5, 'Station wagon': 7, 'Minivan': 4, 'Compact': 0, 'Two-seater': 9, 'Minicompact': 3\n",
    "    })\n",
    "    df['Transmission'] = df['Transmission'].replace({'A': 0, 'M': 4, 'AM': 1, 'AS': 2, 'AV': 3})\n",
    "    df['Fuel type'] = df['Fuel type'].replace({\n",
    "        'X': 2, 'Z': 3, 'D': 0, 'E': 1, 'N': 4\n",
    "    })\n",
    "    return df\n",
    "\n",
    "# Encode user input\n",
    "input_df_encoded = encode_features(input_df)\n",
    "\n",
    "# Make predictions\n",
    "if st.button('Predict'):\n",
    "    prediction = model.predict(input_df_encoded)\n",
    "    st.write(f\"### Predicted Fuel Consumption (L/100 km): {prediction[0]:.2f}\")\n",
    "\n",
    "# Dashboard: Feature Importance Visualization\n",
    "if st.checkbox(\"Show Feature Importances\"):\n",
    "    importances = model.feature_importances_\n",
    "    features = ['Vehicle class', 'Engine size (L)', 'Cylinders', 'Transmission', 'Fuel type', 'CO2 emissions (g/km)', 'CO2 rating', 'Smog rating']\n",
    "    importance_df = pd.DataFrame({'Feature': features, 'Importance': importances}).sort_values(by='Importance', ascending=False)\n",
    "\n",
    "    st.bar_chart(importance_df.set_index('Feature'))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
